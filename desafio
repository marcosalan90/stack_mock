#include <stdio.h>
#include <stdlib.h>

// Estrutura da pilha
typedef struct Node {
    int data;
    struct Node* next;
} Node;

// Função para empilhar um elemento
void push(Node** top, int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (!newNode) {
        printf("Erro de alocação de memória\n");
        return;
    }
    newNode->data = data;
    newNode->next = *top;
    *top = newNode;
}

// Função para desempilhar um elemento
int pop(Node** top) {
    if (*top == NULL) {
        printf("Pilha vazia\n");
        return -1;
    }
    Node* temp = *top;
    int data = temp->data;
    *top = (*top)->next;
    free(temp);
    return data;
}

// Função para inverter a pilha
void invertStack(Node** top) {
    Node* tempStack = NULL;
    while (*top != NULL) {
        push(&tempStack, pop(top));
    }
    *top = tempStack;
}

// Função para imprimir a pilha
void printStack(Node* top) {
    while (top != NULL) {
        printf("%d ", top->data);
        top = top->next;
    }
    printf("\n");
}

int main() {
    Node* stack = NULL;

    // Empilhando elementos
    push(&stack, 1);
    push(&stack, 2);
    push(&stack, 3);
    push(&stack, 4);

    printf("Pilha original: ");
    printStack(stack);

    // Invertendo a pilha
    invertStack(&stack);

    printf("Pilha invertida: ");
    printStack(stack);

    return 0;
}
